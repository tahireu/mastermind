{"version":3,"sources":["index.js"],"names":["Row","props","allCombinations","value","key","row","isActive","activeRow","resultsPerRow","className","repeat","Symbol","disabled","status","onClick","Commands","onStartClick","confirmRequired","confirmClick","clearDisabled","clear","restart","Board","state","currentCombination","bingo","0","1","2","3","4","5","6","7","counter","i","handleSymbolClick","this","setState","random","push","Math","floor","console","log","index","current","slice","comparingSample","result","countMatched","cloneDeep","includes","indexOf","splice","confetti","particleCount","spread","origin","y","length","cellSpacing","renderSymbol","renderRow","React","Component","Game","alt","src","href","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.84f25647.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport cloneDeep from 'lodash.clonedeep';\nimport confetti from 'canvas-confetti';\nimport './index.css';\n\n\nfunction Row (props) {\n    const allCombinations = props.value;\n    const key = props.row;\n    const isActive = (props.activeRow === key) ? ' active' : ''\n    const resultsPerRow = props.resultsPerRow;\n    const dot = \".\";\n\n    return (\n        <tr className={`board-row board-row-${key}${isActive}`}>\n            <td className={`square mm-icon mm-icon--${allCombinations[key][0]}`}/>\n            <td className={`square mm-icon mm-icon--${allCombinations[key][1]}`}/>\n            <td className={`square mm-icon mm-icon--${allCombinations[key][2]}`}/>\n            <td className={`square mm-icon mm-icon--${allCombinations[key][3]}`}/>\n            <td className=\"square mm-dots\">\n                <span className='mm-dot mm-dot--black'>{dot.repeat(resultsPerRow[key][0])}</span>\n                <span className='mm-dot mm-dot--red'>{dot.repeat(resultsPerRow[key][1])}</span>\n            </td>\n        </tr>\n    )\n}\n\nfunction Symbol (props) {\n    return (\n        <td>\n            <button disabled={props.status==='You WON! 🎉🎉🎉' || props.status==='Press \"Start\" to begin'}\n                    className={`mm-icon mm-icon--${props.value}`}\n                    onClick={() => props.onClick()}>\n            </button>\n        </td>\n    );\n}\n\nfunction Commands (props) {\n\n    if (props.status==='Press \"Start\" to begin')  {\n        return (\n            <button onClick={props.onStartClick}>Start Game</button>\n        )\n    } else {\n        return (\n            <div>\n                <button disabled={!props.confirmRequired} onClick={props.confirmClick}>Confirm</button>\n                <button disabled={props.clearDisabled} onClick={props.clear}>Clear</button>\n                <button onClick={props.restart}>Restart</button>\n            </div>\n        )\n    }\n}\n\n\nclass Board extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentCombination: [],\n            bingo: [],\n            allCombinations: {0:[], 1:[], 2:[], 3:[], 4:[], 5:[], 6:[], 7:[]},\n            resultsPerRow: {0:[], 1:[], 2:[], 3:[], 4:[], 5:[], 6:[], 7:[]},\n            counter: 0,\n            activeRow: false,\n            confirmRequired: false,\n            clearDisabled: false,\n            status: 'Press \"Start\" to begin'\n        };\n    }\n\n    renderSymbol(i) {\n        return (\n            <Symbol\n                value= {i}\n                onClick={() => this.handleSymbolClick(i)}\n                status={this.state.status}\n            />\n        );\n    }\n\n    renderRow(i) {\n        return <Row\n            value={this.state.allCombinations}\n            row={i}\n            activeRow={this.state.activeRow}\n            resultsPerRow={this.state.resultsPerRow}\n        />;\n    }\n\n    onStartClick() {\n        this.setState({status: 'Choose your combination'})\n        this.setState({activeRow: 0})\n        this.setState({clearDisabled: false})\n\n        let random = []\n        for (let i = 0; i < 4; i++) {\n            random.push(Math.floor((Math.random() * 4)))\n        }\n        this.setState({bingo: random})\n        console.log(`bingo: ${random}`);\n    }\n\n    confirmClick() {\n        this.setState({confirmRequired: false})\n\n        const current = this.state.allCombinations[(this.state.counter)],\n            bingo = this.state.bingo.slice(),\n            comparingSample = current.slice()\n\n        let index,\n            result = 0,\n            countMatched = 0,\n            resultsPerRow = cloneDeep(this.state.resultsPerRow)\n\n        for (let i = 0; i < 4; i++) {\n            if (current[i] === bingo[i]) {\n                result++;\n            }\n            if (comparingSample.includes(bingo[i])) {\n                index = comparingSample.indexOf(bingo[i]);\n                if (index > -1) {\n                    comparingSample.splice(index, 1)\n                    countMatched++;\n                }\n            }\n        }\n\n        resultsPerRow[(this.state.counter)] = [countMatched, result]\n        this.setState({resultsPerRow: resultsPerRow})\n\n        if (result === 4) {\n            this.setState({status: 'You WON! 🎉🎉🎉'})\n            this.setState({clearDisabled: true})\n            confetti({\n                particleCount: 200,\n                spread: 120,\n                origin: {\n                    y: 0.6\n                }\n            });\n        } else {\n            this.setState({status: 'Choose your combination'})\n            const counter = this.state.counter;\n            this.setState({currentCombination: []})\n            this.setState({counter: counter + 1})\n            this.setState({activeRow: counter + 1})\n        }\n\n        if (this.state.counter === 7) {\n            this.setState({status: 'You LOST!  🤷🏻‍♂️ 🤷🏻‍♂️ 🤷🏻‍♂️'})\n            this.setState({clearDisabled: true})\n        }\n    }\n\n    restart() { // this could probably be done in more elegant way, with clone-deep or something\n        this.setState({currentCombination: []})\n        this.setState({allCombinations: {0:[], 1:[], 2:[], 3:[], 4:[], 5:[], 6:[], 7:[]}})\n        this.setState({resultsPerRow: {0:[], 1:[], 2:[], 3:[], 4:[], 5:[], 6:[], 7:[]}})\n        this.setState({counter: 0})\n        this.setState({activeRow: false})\n        this.setState({confirmRequired: false})\n        this.setState({bingo: []})\n        this.setState({status: 'Press \"Start\" to begin'})\n    }\n\n    clear() {\n        this.setState({currentCombination: []})\n        let allCombinations = this.state.allCombinations;\n        let resultsPerRow = this.state.resultsPerRow;\n        allCombinations[this.state.counter] = [];\n        resultsPerRow[this.state.counter] = [];\n        this.setState({allCombinations: allCombinations})\n        this.setState({resultsPerRow: resultsPerRow})\n\n        let counter = this.state.counter;\n        this.setState({counter: counter})\n        this.setState({activeRow: counter})\n        this.setState({confirmRequired: false})\n        this.setState({status: 'Choose your combination'})\n    }\n\n    handleSymbolClick(i) {\n\n        if (this.state.confirmRequired === true) {\n            return\n        }\n\n        const currentCombination = this.state.currentCombination;\n        const allCombinations = this.state.allCombinations;\n        const counter = this.state.counter;\n\n        currentCombination.push(i);\n        if (currentCombination.length < 4) {\n            this.setState({currentCombination: currentCombination})\n            allCombinations[counter] = (currentCombination);\n            this.setState({allCombinations: allCombinations})\n        } else {\n            this.setState({confirmRequired: true})\n            this.setState({status: 'Confirm'})\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"mm-status\">\n                    {this.state.status}\n                </div>\n                <div className=\"mm-commands\">\n                    <Commands\n                        status={this.state.status}\n                        confirmRequired={this.state.confirmRequired}\n                        clearDisabled={this.state.clearDisabled}\n                        onStartClick={() => this.onStartClick()}\n                        confirmClick={() => this.confirmClick()}\n                        restart={() => this.restart()}\n                        clear={() => this.clear()}\n                        />\n                </div>\n                <table className=\"mm-selection\" cellSpacing=\"0\">\n                    <tbody>\n                    <tr>\n                        {this.renderSymbol(0)}\n                        {this.renderSymbol(1)}\n                        {this.renderSymbol(2)}\n                        {this.renderSymbol(3)}\n                    </tr>\n                    </tbody>\n                </table>\n                <table className=\"board-content\">\n                    <tbody>\n                    {this.renderRow(0)}\n                    {this.renderRow(1)}\n                    {this.renderRow(2)}\n                    {this.renderRow(3)}\n                    {this.renderRow(4)}\n                    {this.renderRow(5)}\n                    {this.renderRow(6)}\n                    {this.renderRow(7)}\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n}\n\nfunction Game () {\n    return (\n        <div className=\"mm-game\">\n            <div className=\"mm-game__logo\">\n                <img alt='' src='mastermind.png' />\n            </div>\n            <div className=\"mm-game__board\">\n                <Board />\n            </div>\n            <div className=\"mm-game__info\">\n                Mastermind is a code-breaking game, invented in 1970 by Mordecai Meirowitz,\n                Romanian-born Israeli postmaster and telecommunications expert.\n                <img alt='' src='Mordecai-Meirowitz.jpg' /><br/><hr/>\n                This is a ReactJS app. Feel free to send any suggestions on Github.\n\n                <br/><br/><a href={'https://github.com/tahireu/mastermind'}>https://github.com/tahireu/mastermind</a>\n            </div>\n        </div>\n    )\n}\n\n\n// ========================================\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}